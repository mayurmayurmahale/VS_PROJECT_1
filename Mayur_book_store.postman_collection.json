{
	"info": {
		"_postman_id": "dab2392d-97c0-4f23-9e04-8d0ca01353b9",
		"name": "Mayur_book_store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23177505"
	},
	"item": [
		{
			"name": "create user account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201)});\r",
							"\r",
							"pm.test(\"Status code name is CREATED\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var userIdValue = jsonData.userID;\r",
							"pm.collectionVariables.set(\"user-id\", userIdValue);\r",
							"   \r",
							"   \r",
							"    pm.test(\"User created successfully\", function () {\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('userID');\r",
							"    pm.expect(jsonData).to.have.property('username');\r",
							"    pm.expect(jsonData).to.have.property('books');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{userName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/User",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var tokenValue = jsonData.token;\r",
							"pm.collectionVariables.set(\"token\", tokenValue);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"User authorized successfully\", function()\r",
							"{\r",
							"pm.expect(jsonData).have.property(\"token\");\r",
							"pm.expect(jsonData).have.property(\"expires\");\r",
							"pm.expect(jsonData).have.property(\"status\");\r",
							"pm.expect(jsonData).have.property(\"result\");\r",
							"pm.expect(jsonData.result).to.eql(\"User authorized successfully.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{userName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/GenerateToken",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"GenerateToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "verify authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Authorization is true\", function () {\r",
							"    pm.expect(jsonData).have.property.toString(\"true\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code name is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"{{userName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/Authorized",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"Authorized"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch user details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/Account/v1/User/{{user-id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{user-id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch all books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"var isbnValue = jsonData.books[2].isbn;\r",
							"pm.collectionVariables.set(\"isbnValue\", isbnValue);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content Validation\",function(){\r",
							"    pm.expect(jsonData.books[2]).have.property(\"isbn\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"title\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"subTitle\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"author\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"publish_date\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"publisher\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"pages\")\r",
							"    pm.expect(jsonData.books[2]).have.property(\"description\")\r",
							"   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"json property validation\", function () {\r",
							"\r",
							"    pm.expect(jsonData.books.length).to.be.above(0);\r",
							"   \r",
							"});    \r",
							"  \r",
							"\r",
							"pm.test('Status code is 201', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('Status code name is CREATED', function () {\r",
							"    pm.response.to.have.status('Created');\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{user-id}}\",\r\n  \"collectionOfIsbns\": [\r\n    {\r\n      \"isbn\": \"{{isbnValue}}\"\r\n    }\r\n  ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fetch certain book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Content Validation\",function(){\r",
							"    pm.expect(jsonData).have.property(\"isbn\")\r",
							"    pm.expect(jsonData).have.property(\"title\")\r",
							"    pm.expect(jsonData).have.property(\"subTitle\")\r",
							"    pm.expect(jsonData).have.property(\"author\")\r",
							"    pm.expect(jsonData).have.property(\"publish_date\")\r",
							"    pm.expect(jsonData).have.property(\"publisher\")\r",
							"    pm.expect(jsonData).have.property(\"pages\")\r",
							"    pm.expect(jsonData).have.property(\"description\")\r",
							"   \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Book?ISBN={{isbnValue}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					],
					"query": [
						{
							"key": "ISBN",
							"value": "{{isbnValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete certain book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Status code name is No Content\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{user-id}}\",\r\n  \r\n      \"isbn\": \"{{isbnValue}}\"\r\n    \r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/BookStore/v1/Book",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"BookStore",
						"v1",
						"Book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user account",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 3000 ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name is No Content\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/Account/v1/User/{{user-id}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"Account",
						"v1",
						"User",
						"{{user-id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user-id",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "pages",
			"value": ""
		},
		{
			"key": "pagesValue",
			"value": ""
		},
		{
			"key": "isbnValue",
			"value": ""
		},
		{
			"key": "ISBN",
			"value": "",
			"type": "string"
		},
		{
			"key": "baseURL",
			"value": "https://bookstore.toolsqa.com"
		}
	]
}